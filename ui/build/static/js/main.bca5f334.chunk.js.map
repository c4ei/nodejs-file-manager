{"version":3,"sources":["App.js","index.js"],"names":["getList","path","Promise","resolve","a","fetch","apiPath","response","json","list","console","error","createDirectory","reject","name","prompt","method","headers","body","JSON","stringify","deletePaths","paths","window","confirm","openFile","open","rename","parts","split","length","uploadFiles","files","log","formData","FormData","forEach","file","index","append","App","className","features","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAKMA,EAAU,SAACC,GACf,OAAO,IAAIC,QAAJ,uCAAY,WAAMC,GAAN,iBAAAC,EAAA,+EAEQC,MAAMC,uBAA+BL,GAF7C,cAETM,EAFS,gBAGIA,EAASC,OAHb,OAGTC,EAHS,OAIfN,EAAQM,GAJO,kDAMfC,QAAQC,MAAR,MANe,0DAAZ,wDAWHC,EAAkB,SAACX,GACvB,OAAO,IAAIC,QAAJ,uCAAY,WAAOC,EAASU,GAAhB,eAAAT,EAAA,2DACXU,EAAOC,OAAO,iBAAkB,eADrB,0CAIPV,MAAMC,kBAAyB,CACjCU,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEnB,OAAMa,WAPpB,OAUbX,IAVa,gDAYbO,QAAQC,MAAR,MACAE,EAAO,EAAD,IAbO,yDAAZ,0DAmBHQ,EAAc,SAACC,GACnB,OAAO,IAAIpB,QAAJ,uCAAY,WAAOC,EAASU,GAAhB,SAAAT,EAAA,0DACbmB,OAAOC,QAAQ,YADF,0CAGPnB,MAAMC,mBAA0B,CAClCU,OAAQ,SACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEE,YANd,OASbnB,IATa,gDAWbO,QAAQC,MAAR,MACAE,EAAO,EAAD,IAZO,yDAAZ,0DAkBHY,EAAW,SAACxB,GAChBsB,OAAOG,KAAKpB,sBAA8BL,IAGtC0B,EAAS,SAAC1B,GACd,OAAO,IAAIC,QAAJ,uCAAY,WAAOC,EAASU,GAAhB,iBAAAT,EAAA,6DACXwB,EAAQ3B,EAAK4B,MAAM,KACnBf,EAAOC,OAAO,WAAYa,EAAMA,EAAME,OAAS,IAFpC,kBAITzB,MAAMC,mBAA0B,CAClCU,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEnB,OAAMa,WAPlB,OAUfX,IAVe,gDAYfO,QAAQC,MAAR,MACAE,EAAO,EAAD,IAbS,yDAAZ,0DAkBHkB,EAAc,SAAC9B,EAAM+B,GACzB,OAAO,IAAI9B,QAAJ,uCAAY,WAAOC,EAASU,GAAhB,eAAAT,EAAA,6DACjBM,QAAQuB,IAAI,CAAEhC,OAAM+B,UADH,SAGTE,EAAW,IAAIC,SACrB,YAAIH,GAAOI,SAAQ,SAACC,EAAMC,GACxBJ,EAASK,OAAO,OAASD,EAAOD,MAElCH,EAASK,OAAO,OAAQtC,GAPT,SAQTI,MAAMC,mBAA0B,CAClCU,OAAQ,OACRE,KAAMgB,IAVK,OAaf/B,IAbe,kDAefO,QAAQC,MAAR,MACAE,EAAO,EAAD,IAhBS,0DAAZ,0DAmCM2B,MAdf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,CAAazC,QAASA,EACTY,gBAAiBA,EACjBS,YAAaA,EACbI,SAAUA,EACVM,YAAaA,EACbJ,OAAQA,EACRe,SAAU,CAAC,kBAAmB,cAAe,cAAe,eCzG/EC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.bca5f334.chunk.js","sourcesContent":["import React from \"react\";\nimport FileManager from \"react-file-manager-ui\";\n\nconst apiPath = '/api';\n\nconst getList = (path) => {\n  return new Promise(async resolve => {\n    try {\n      const response = await fetch(apiPath + '/file/list?path=' + path);\n      const list = await response.json();\n      resolve(list);\n    } catch (error) {\n      console.error(error);\n    }\n  });\n};\n\nconst createDirectory = (path) => {\n  return new Promise(async (resolve, reject) => {\n    const name = prompt(\"Directory name\", \"New folder\");\n    if (name) {\n      try {\n        await fetch(apiPath + '/file/mkdir', {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ path, name })\n          }\n        );\n        resolve();\n      } catch (error) {\n        console.error(error);\n        reject(error);\n      }\n    }\n  });\n};\n\nconst deletePaths = (paths) => {\n  return new Promise(async (resolve, reject) => {\n    if (window.confirm('Delete ?')) {\n      try {\n        await fetch(apiPath + '/file/delete', {\n            method: 'delete',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ paths })\n          }\n        );\n        resolve();\n      } catch (error) {\n        console.error(error);\n        reject(error);\n      }\n    }\n  });\n};\n\nconst openFile = (path) => {\n  window.open(apiPath + '/file/get?path=' + path);\n};\n\nconst rename = (path) => {\n  return new Promise(async (resolve, reject) => {\n    const parts = path.split('/');\n    const name = prompt(\"New name\", parts[parts.length - 1]);\n    try {\n      await fetch(apiPath + '/file/rename', {\n          method: 'put',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ path, name })\n        }\n      );\n      resolve();\n    } catch (error) {\n      console.error(error);\n      reject(error);\n    }\n  });\n};\n\nconst uploadFiles = (path, files) => {\n  return new Promise(async (resolve, reject) => {\n    console.log({ path, files });\n    try {\n      const formData = new FormData();\n      [...files].forEach((file, index) => {\n        formData.append('file' + index, file);\n      });\n      formData.append('path', path);\n      await fetch(apiPath + '/file/upload', {\n          method: 'post',\n          body: formData\n        }\n      );\n      resolve();\n    } catch (error) {\n      console.error(error);\n      reject(error);\n    }\n  });\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FileManager getList={getList}\n                   createDirectory={createDirectory}\n                   deletePaths={deletePaths}\n                   openFile={openFile}\n                   uploadFiles={uploadFiles}\n                   rename={rename}\n                   features={['createDirectory', 'uploadFiles', 'deletePaths', 'rename']}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}